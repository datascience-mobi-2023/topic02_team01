n * (asterisk) indicates positions which have a single, fully conserved residue.
A : (colon) indicates conservation between groups of strongly similar properties - scoring > 0.5 in the Gonnet PAM 250 matrix.
A. (period) indicates conservation between groups of weakly similar properties - scoring =< 0.5 in the Gonnet PAM 250 ma
*" means that the residues or nucleotides in that column are identical in all sequences in the alignment.
":" means that conserved substitutions have been observed, according to the COLOUR table below.
"." means that semi-conserved substitutions are observed, i.e., amino acids having similar shape. Conserved means the amino acid is replaced by one having similar characteristics.




PAM matrix:

Höhere Werte für verschiedenere Proteine


A PAM matrix is a matrix where each column and row represents one of 
the twenty standard amino acids. In bioinformatics, PAM matrices are sometimes
 used as substitution matrices to score sequence alignments for proteins. Each entry in a PAM matrix indicates 
 the likelihood of the amino acid of that row being replaced with the amino acid of that column through a 
series of one or more point accepted mutations during a specified evolutionary interval, rather than these two amino acids being aligned due to chance.
Different PAM matrices correspond to different lengths of time in the evolution of the protein sequence.



  BLOSUM:

  They scanned the BLOCKS database for very conserved regions of protein 
  families (that do not have gaps in the sequence alignment) and then counted the relative
   frequencies of amino acids and their substitution probabilities. 
   Then, they calculated a log-odds score for each of the 210 possible substitution pairs of the 
   20 standard amino acids. All BLOSUM matrices are based on observed alignments; they are not extrapolated
    from comparisons of closely related proteins like the PAM Matrices.


    CLUSTAL W UND V sind unterstützt




    BIOPYTHON

    from Bio import Align
>>> aligner = Align.PairwiseAligner()
>>> aligner.match_score
1.0
>>> aligner.mismatch_score
0.0
>>> score = aligner.score("ACGT", "ACAT")
>>> print(score)
3.0
>>> aligner.match_score = 1.0
>>> aligner.mismatch_score = -2.0
>>> aligner.gap_score = -2.5
>>> score = aligner.score("ACGT", "ACAT")
>>> print(score)
1.0